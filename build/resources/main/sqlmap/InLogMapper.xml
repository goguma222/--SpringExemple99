<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.devhouse.example2.log.LogMapper">

    <!--
        # 주석다는 법은 HTML과 동일함.
        # SQL Query Console : CRUD -> 쿼리로 명령 -> 이 쿼리는 xml 에 적혀있다고 했고, 이걸 mybatis 가 db 가져가고,
        결과를 받아오는 거다.
        # mapper 자체에도 CRUD 가 필요하겠네 ? -> 쿼리 동일함.
        # Query = 길어지면, 가독성 최악이 되요, 보통 어떤 형식으로 쓰냐면

        SELECT 컬럼명
        FROM 테이블
        WHERE 조건절
        ORDER BY
     -->

    <!-- id = 매칭되는 자바 파일의 인터페이스의 가상함수 이름과 동일. -->
    <!-- resultType : 이 타입으로 데이터를 전달 해줘, SELECT => 데이터가 하나면 resultType으로 반환하고,
        데이터가 여러개면 List<데이터타입> 으로 반환해요.

        Map => 키/벨류 형태로 되어있는 JSON 같은 아이임. ( 아이폰 = 딕셔너리 )
    -->
    <select id="getLogList" resultType="java.util.HashMap">
        SELECT * FROM inLog
        WHERE type = 'T'
        LIMIT 10
    </select>

    <!--
    - 상품 서치 : SELECT
    - 상품 등록 : INSERT
    - 상품 수정 : UPDATE

    SELECT * FROM mainCategory WHERE idx ORDER BY idx asc;

    /**
    # INSERT : 데이터를 신규로 추가함
    - INSERT INTO 테이블명(컬럼들) VALUES(값들)

    INSERT INTO 테이블명 (키, 키, 키)
    VALUSE(값, 값, 값)

    # 테이블 생성할 때 설정하는 값들이 몇개 있다.
    - key : 인덱스, 조회시 도움이 되는 키들, primary key, 외래키
    - 인덱스 설정
    - auto increament : 자동증분.

    - 컬럼에 대한 옵션
    => not null : null 이 들어가면 안됨
    => default : 기본값 설정
    => comment : 설명

    */

    INSERT INTO mainCategory(projectIdx)
    VALUES (20);


    /**
    # 4월 22일
    * SELECT - 찾는 SQL문, SELECT컬럼명 FROM테이블명 (WHERE 조건 ORDER BY 정렬 LIMIT 숫자)
    * INSERT - INSERT INTO 테이블명 (컬럼명, 컬럼명) VALUES(값, 값)

    * 컬럼에 고유 성질
    - 키 : 외래키, 기본키 등 인덱스로 사용할 수 있는 컬럼
    => 기본키: 중복되지 않고, null 이 되지 않는 가장 무결한 문제없는 컬럼을 의미
    => 이 기본키, 테이블마다 한개씩 존재함.(기본 index)
    => 기본키 하나만으로 조회를 할 수도 있음.
    => primary key


    - 인덱스 : 검색을 빨리 하기 위해 설정하는 규칙
    => 키를 지정하면 검색이 빨라짐
    => SELECT 를 빨리하기 위한 친구, WHERE 옵션 걸 때 사용함.
    => 평소에는 티가 잘 안남. 간단한거 조회 할때는 티가 잘 안남. 데이터가 많지 않는 테이블 조회시엔 티가 안남
    => 데이터가 많거나, 많은 양을 GROUP BY, JOIN 할 때 실행계획에서 차이가 남.

    - 실행계획 : 이 쿼리를 수행하는 얼마만큼의 자원이 들어간다 를 알려주는 지표
    => SELECT, 테이블을 전체 스캔, 부분 스캔, 스캔이 이루어진 다음에 또 다시 조회를 하는 겨우도 있고
    => 여러가지 조회를 종합을 해서 정확히 얼마나 시간이 걸리는지 계산을 미리하는 함.


    - 해당 컬럼에만 줄 수 있는 옵션 : auto increment, not, null, default


    - 참고사항. 애는 나중에 알아도 되는 내용임
    * DB 장에 - 내부 API 가 자원을 너무 많이 끌어 쓰니깐 생기는 문제
    => 락이 걸린다고 표현함.
    => DB 에 테이블은 보통 락을 거는데, 트랜잭션.
    => UPDATE / INSERT / DELETE 중에 작업완료 전에 조회를 하게 되면, 해당 데이터가 정상적으로 노출이 안될 수 있음.
    => 이상황에서 데이터 무결성에 문제가 생긱는데, 조회를 하면 항상 같은 데이터가 나와야함. 현제 테이블에 있는 데이터.
    => U / I / D DB가 테이블에 락을 검. 저 3가지 동작이 끝나면 자동으로 락을 품.
    => 프로시저를 태우면, 프로시저 = 트랜잭션을 거는게 있음.


    * DB 조회 시 좋은 방법
    - 실행계획이 낮은 쿼리를 쓴다. 최대한 최적화 된 쿼리를 쓴다.
    - SELECT : JOIN, 이중 SELECT, GROUP BY 등을 쓸 때는 실행계획 보는게 좋음. 인덱스 함꼐 사용.

    */

    #SELECT * FROM mainCategory;

    # 기본쿼리, 공통쿼리
    - 전체 스키마 조회.
    SHOW SCHEMAS;

    - 테이블 리스트 조회
    use apiDocs; - 내가 조회할 DB 조회할 설정
    show tables; - 테이블 리스트 조회

    - 컬럼명 조회
    show columns from inLog;

    /*
     * 쿼리 조회 방법
     1. 전체 스키마를 조회해본다 (선택)
     2. 테이블 리스트 조회한다. (필수)
     3. 컬럼명을 조회한다. (2번을 꼭 쓰고 2번 테이블 안에 있는 컬럼명들을 조회를 할 수 있다.)
     */

    # 업데이트 문의 구조
    /**
    UPDATE 테이블명 SET 컬러명 = 값(WHERE 조건절)
    - 업데이트는 해당 컬럼의 값을 변경하는 쿼리.
    - SET 뒤에 있는 컬럼명 = 값 > 컬럼명 = 값, 컬럼명 = 값
    - UPDATE 문에 WHERE 이 안들어가 있다면, 경고창 노출됨. 다 바뀔 수 있기 때문에.

    고유값이 없을 때 무조건 limit을 걸어준다.
    */
    SELECT * FROM mainCategory WHERE idx=32;

    UPDATE mainCategory
    SET name = '테스트', projectIdx = 10
    WHERE idx = 32;

    # 삭제문
    /**
    DELETE FROM 테이블명 (WHERE 조건)
    */

    SELECT * FROM mainCategory;
    DELETE FROM mainCategory WHERE idx = 34;
    -->


    <!--4/26
    - InLog 에 로그를 추가하는 쿼리
    - InLog 에 데이터를 삭제하는 쿼리 : 특정 IP 에 대한 로그 삭제


    /* InLog 에 로그를 추가하는 쿼리 */
    INSERT INTO inLog(type,ip,contentInfo,callPath,regDate,regTime)
    VALUES ('a','0:0:0:0:0:0:1','is Test Connect','root','20240426','120805');

    SELECT * FROM inLog ORDER BY idx desc;

    DELETE FROM inLog WHERE ip = '1.235.221.22';

    SELECT * FROM inLog WHERE ip = '1.235.221.22';

    SELECT * FROM inLog WHERE ip != '1.235.221.22'
    ORDER BY idx desc
    limit 50;

    &#45;&#45; update
    UPDATE inLog
    SET type = 'p'
    WHERE ip = '10.20.10.70';

    &#45;&#45; CRUD 끝남!

    * 번외 : 테이블 볼 때 필요한거
    - int : 숫자(정수)
    - Decimal : 숫자 (얘는 정수, 범위가 넓은 정수)
    - tinyint : 작은 숫자
    - varchar : 문자열, 괄호 안이 크기 (크기 유동적)
    - char : 문자열, 괄호 안이 크기

    * 크기계산
    - 영문, 숫자 : 1byte
    - 한글 : 2byte
    ex) varchar(10) : 영문, 숫자만 쓰면 10글자까지 들어감, 한글만 쓰면 5글자.-->
</mapper>