<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.devhouse.example.example.log.LogMapper">

    <!--
        # 주석다는 법은 HTML 과 동일함.
        # SQL Query Console : CRUD -> 쿼리로 명령 -> 이 쿼리는 xml 에 적혀있다고 했고, 이걸 mybatis 가 db를 가져가고, 결과를 받아오는 거다.
        # mapper 자체에도 CRUD 가 필요하겠네 ? -> 쿼리 동일함.
        # Query = 길어지면, 가독성이 최악이 된다. 보통 언떤 형식으로 쓰냐면

        SELECT 컬럼명
        FROM 테이블
        WHERE 조건절
        ORDER BY
     -->

    <!-- id = 매칭되는 자바 파일의 인터페이스의 가상함수 이름과 동일. -->
    <!--

    resultType: 이 타입으로 데이터를 전달 해줘, SELECT => 데이터가 하나면 resultType 으로 반환하고, 데이터가 여러개면 List<데이터타입> 으로 반환한다.

    Map => key / value 형태로 되어있는 JSON 같은 아이임. ( 아이폰 = 딕셔너리)

    -->

    <select id="getLogList" resultType="java.util.HashMap">
        SELECT * FROM inLog
    </select>


<!--
/*
    mapper -> mybatis 소통을 하는 친구
    mapper -> XML 에 있는 언어를 통해 소통을 함.

    mapper.xml => QUERY 를 써서 데이터를 제어함.
    가벼운 쿼리를 사용할줄 알아야 하는데.

    CRUD => 만들고, 읽고, 업데이트, 지우고
 */

- 읽기 : SELECT
/**
  * 스키마 : 데이터베이스 가장 큰 구조단위, 우리가 흔히 DB = 스키마
  * 스키마 구성요소들 중 하나가 = 테이블 ( 엑셀에서 표를 만드는 것과 비슷함 )
  * 테이블에 데이터를 넣게되는데
    * 가로 제일 첫줄 = 컬럼
 */

/*
    구문구조
    SELECT 컬럼명들 FROM 테이블 이름 ( WHERE 조건절 ORDER BY 정렬문 LIMIT 제한숫자 )

    SELECT = 데이터를 읽어 오는 구문, 각종 조건이나, 정렬조건을 달아 원하는 양, 원하는 모양의 데이터를 가져오는 역할을 함
    기본 구문 구조 - SELECT 컬럼명들 FROM 테이블 이름 ( WHERE 조건절 ORDER BY 정렬문 )
    -> 괄호로 되어 있는 부분 : 선택사항, 없어도 되는 부분. 필요한 경우에만 사용함
    -> 컬럼명들 : 테이블에 있는 컬럼명, 여러개를 적을수 있고, 콤마로 구분을 함. 근데 다만, 다불러 와야 되는 경우 * 을 찍음.
    -> 테이블이름 : 하나만 적는걸 원칙으로 함
    -> 조건절 : 여러개를 쓸수 있고, AND 또는 OR 을 붙여서 여러개를 써요, AND 모두포함, OR 은 이 조건이 포함되든 안되든 상관없음.
    -> 정렬문 : ASC : 오름차순  / DESC  내림차순, ORDER BY [정렬할 컬럼명] [오자/내림차순여부]
    -> 숫자라면 숫자의 큼/작음에 따라 오름/내림차순, 영문은 abcd 순서에 따라 오름/내림차순을 함.

    *  막 조회시, 문자가 날라오는 경우 있음 : 너무 큰 데이터 조회한다고 해서.
    -> [LIMIT 조회숫자] : 데이터 조회 숫자에 제한을 둠,
    -> DataGrip, Mysql Workbench 툴을 사용하게 되면, Limit 숫자가 자동으로 걸려요. 500개가 기본으로 걸려있음.
    -> 응용, APi => 걸어주는게 없음. 그래서 LIMIT 를 사용함.
    -> 페이징시, 리밋 사용하고 있음.

    * 조건절,
    -> >, <, <=, => 등 부등호 사용 가능. 숫자 비교 가능
    -> 문자열 비교 가능한데 문자열은 = 을 써요. 문자열 사용시 ' ' 요렇게 붙이고, 데이터 를 넣으면 됨
    -> 문자열 비교시, != 를 쓰면 그 문자열이 아닌것.
    -> 포함된거 조회시, Like 사용
    -> % : 내가 찾으려는 문자열 앞에 다른 문자가 있는지 여부를 표시
    -> 맨앞에 있는걸 : 문자열% , 중간 : %문자열%, 뒤에꺼를 찾으면 ? : %문자열

    -> between, <> : 요런애들은 날짜비교시 사용
*/

SELECT * FROM inLog
WHERE ip LIKE '%102';

# SELECT * FROM inLog
#          WHERE type != 'T' AND idx < 1000
#          ORDER BY idx DESC LIMIT 50;

/**
  inLog 테이블 사용, 컬럼 전부 로드
  type 이 T인 값들 불러오고,
  10개씩 잘라서 불러옴
 */

SELECT * FROM inLog
WHERE type = 'T'
LIMIT 10

/**
  4월 15일

  DataGrip : 데이터 베이스 다루는데 특화되어 있음, 쿼리쓰는 아주좋아요.
  -> 쿼리연습을 하거나, 복잡한 쿼리를 쓰거나 할때 좋음
  -> apiDocs : 데이터가 많으므로, 이것저것 학습하기 좋으시니까 => Join / Between -> 다른 문법을 할건데, 이거 연습하기 좋아요.

  * Intellij : 스프링 및 스프링 부트 코드용
  스프링부트 => 내장톰켓을 씀, 이 내장톰켓을 => 인텔리제이가 기본적으로 지원함.
  이클립스, STS -> 얘네 엄청 느림, 답답함….
 */

 -->

<!--
    &#45;&#45; 상품 서치 : SELECT
    &#45;&#45; 상품 등록 : INSERT
    &#45;&#45; 상품 수정 : UPDATE

    SELECT * FROM mainCategory WHERE idx ORDER BY idx asc;

    /**
    # INSERT : 데이터를 신규로 추가함
    - INSERT INTO 테이블명(컬럼들) VALUES(값들)

    INSERT INTO 테이블명 (키, 키, 키)
    VALUSE(값, 값, 값)

    # 테이블 생성할 때 설정하는 값들이 몇개 있다.
    - key : 인덱스, 조회시 도움이 되는 키들, primary key, 외래키
    - 인덱스 설정
    - auto increament : 자동증분.

    - 컬럼에 대한 옵션
    => not null : null 이 들어가면 안됨
    => default : 기본값 설정
    => comment : 설명

    */

    INSERT INTO mainCategory(projectIdx)
    VALUES (20);;


    /**
    # 4월 22일
    * SELECT - 찾는 SQL문, SELECT컬럼명 FROM테이블명 (WHERE 조건 ORDER BY 정렬 LIMIT 숫자)
    * INSERT - INSERT INTO 테이블명 (컬럼명, 컬럼명) VALUES(값, 값)

    * 컬럼에 고유 성질
    - 키 : 외래키, 기본키 등 인덱스로 사용할 수 있는 컬럼
    => 기본키: 중복되지 않고, null 이 되지 않는 가장 무결한 문제없는 컬럼을 의미
    => 이 기본키, 테이블마다 한개씩 존재함.(기본 index)
    => 기본키 하나만으로 조회를 할 수도 있음.
    => primary key


    - 인덱스 : 검색을 빨리 하기 위해 설정하는 규칙
    => 키를 지정하면 검색이 빨라짐
    => SELECT 를 빨리하기 위한 친구, WHERE 옵션 걸 때 사용함.
    => 평소에는 티가 잘 안남. 간단한거 조회 할때는 티가 잘 안남. 데이터가 많지 않는 테이블 조회시엔 티가 안남
    => 데이터가 많거나, 많은 양을 GROUP BY, JOIN 할 때 실행계획에서 차이가 남.

    - 실행계획 : 이 쿼리를 수행하는 얼마만큼의 자원이 들어간다 를 알려주는 지표
    => SELECT, 테이블을 전체 스캔, 부분 스캔, 스캔이 이루어진 다음에 또 다시 조회를 하는 겨우도 있고
    => 여러가지 조회를 종합을 해서 정확히 얼마나 시간이 걸리는지 계산을 미리하는 함.


    - 해당 컬럼에만 줄 수 있는 옵션 : auto increment, not, null, default


    -&#45;&#45; 참고사항. 애는 나중에 알아도 되는 내용임
    * DB 장에 - 내부 API 가 자원을 너무 많이 끌어 쓰니깐 생기는 문제
    => 락이 걸린다고 표현함.
    => DB 에 테이블은 보통 락을 거는데, 트랜잭션.
    => UPDATE / INSERT / DELETE 중에 작업완료 전에 조회를 하게 되면, 해당 데이터가 정상적으로 노출이 안될 수 있음.
    => 이상황에서 데이터 무결성에 문제가 생긱는데, 조회를 하면 항상 같은 데이터가 나와야함. 현제 테이블에 있는 데이터.
    => U / I / D DB가 테이블에 락을 검. 저 3가지 동작이 끝나면 자동으로 락을 품.
    => 프로시저를 태우면, 프로시저 = 트랜잭션을 거는게 있음.


    * DB 조회 시 좋은 방법
    - 실행계획이 낮은 쿼리를 쓴다. 최대한 최적화 된 쿼리를 쓴다.
    - SELECT : JOIN, 이중 SELECT, GROUP BY 등을 쓸 때는 실행계획 보는게 좋음. 인덱스 함꼐 사용.

    */

    #SELECT * FROM mainCategory;

    # 기본쿼리, 공통쿼리
    &#45;&#45; 전체 스키마 조회.
    SHOW SCHEMAS;

    &#45;&#45; 테이블 리스트 조회
    use apiDocs; &#45;&#45; 내가 조회할 DB 조회할 설정
    show tables; &#45;&#45; 테이블 리스트 조회

    &#45;&#45; 컬럼명 조회
    show columns from inLog;

    # 업데이트 문의 구조
    /**
    UPDATE 테이블명 SET 컬러명 = 값(WHERE 조건절)
    - 업데이트는 해당 컬럼의 값을 변경하는 쿼리.
    - SET 뒤에 있는 컬럼명 = 값 > 컬럼명 = 값, 컬럼명 = 값
    - UPDATE 문에 WHERE 이 안들어가 있다면, 경고창 노출됨. 다 바뀔 수 있기 때문에.

    고유값이 없을 때 무조건 limit을 걸어준다.
    */
    SELECT * FROM mainCategory WHERE idx=32;

    UPDATE mainCategory
    SET name = '테스트', projectIdx = 10
    WHERE idx = 32;

    # 삭제문
    /**
    DELETE FROM 테이블명 (WHERE 조건)
    */

    SELECT * FROM mainCategory;
    DELETE FROM mainCategory WHERE idx = 34;-->

    <!--
     TODO:
     1) UPDATE / DELETE 배운거 복습, 테이블 구분없이 해보기
     2) INSERT 연습하기.
     3) SELECT 문 WHERE(AND / OR 옵션 써보기), LIMIT 사용에 익숙해지기

     4] 쿼리 미리 짜오기
     - InLog 에 로그를 추가하는 쿼리
     - InLog 에 데이터를 삭제하는 쿼리 : 특정 IP 에 대한 로그 삭제 where조건 걸기

     5] 얘는 시간되면 : Handler Interceptor @config에 대한 정보까지 찾아오기, @Component
     -->
</mapper>